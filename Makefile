# Makefile pour le serveur MCP d'assistance informatique

.PHONY: help build run stop clean logs test install dev

# Variables
IMAGE_NAME := mcp-it-assistant
CONTAINER_NAME := mcp-it-assistant
COMPOSE_FILE := docker-compose.yml
CONFIG_FILE := examples/mcp-config.json

# Couleurs pour les messages
RED := \033[0;31m
GREEN := \033[0;32m
YELLOW := \033[0;33m
BLUE := \033[0;34m
NC := \033[0m # No Color

# Aide par d√©faut
help: ## Affiche cette aide
	@echo "$(BLUE)üîß Serveur MCP d'Assistance Informatique$(NC)"
	@echo ""
	@echo "$(YELLOW)Commandes disponibles:$(NC)"
	@awk 'BEGIN {FS = ":.*?## "} /^[a-zA-Z_-]+:.*?## / {printf "  $(GREEN)%-20s$(NC) %s\n", $$1, $$2}' $(MAKEFILE_LIST)

# Construction
build: ## Construit l'image Docker
	@echo "$(BLUE)üèóÔ∏è  Construction de l'image Docker...$(NC)"
	docker build -t $(IMAGE_NAME) .
	@echo "$(GREEN)‚úÖ Image construite avec succ√®s$(NC)"

build-no-cache: ## Construit l'image Docker sans cache
	@echo "$(BLUE)üèóÔ∏è  Construction de l'image Docker (sans cache)...$(NC)"
	docker build --no-cache -t $(IMAGE_NAME) .
	@echo "$(GREEN)‚úÖ Image construite avec succ√®s$(NC)"

# D√©marrage et arr√™t
up: ## D√©marre les services avec Docker Compose
	@echo "$(BLUE)üöÄ D√©marrage des services...$(NC)"
	docker-compose -f $(COMPOSE_FILE) up -d
	@echo "$(GREEN)‚úÖ Services d√©marr√©s$(NC)"

down: ## Arr√™te les services
	@echo "$(BLUE)üõë Arr√™t des services...$(NC)"
	docker-compose -f $(COMPOSE_FILE) down
	@echo "$(GREEN)‚úÖ Services arr√™t√©s$(NC)"

restart: down up ## Red√©marre les services

# D√©veloppement
dev: ## D√©marre en mode d√©veloppement (avec logs)
	@echo "$(BLUE)üõ†Ô∏è  Mode d√©veloppement...$(NC)"
	docker-compose -f $(COMPOSE_FILE) up --build

run-local: ## Ex√©cute le serveur localement (n√©cessite Python)
	@echo "$(BLUE)üêç Ex√©cution locale...$(NC)"
	python server.py

# Monitoring et logs
logs: ## Affiche les logs en temps r√©el
	docker-compose -f $(COMPOSE_FILE) logs -f

logs-tail: ## Affiche les derniers logs
	docker-compose -f $(COMPOSE_FILE) logs --tail=100

status: ## Affiche le statut des services
	@echo "$(BLUE)üìä Statut des services:$(NC)"
	docker-compose -f $(COMPOSE_FILE) ps

stats: ## Affiche les statistiques des conteneurs
	@echo "$(BLUE)üìà Statistiques des conteneurs:$(NC)"
	docker stats --no-stream

# Tests et validation
test: ## Ex√©cute les tests
	@echo "$(BLUE)üß™ Ex√©cution des tests...$(NC)"
	docker-compose -f $(COMPOSE_FILE) exec $(CONTAINER_NAME) python -c "import psutil; print(f'Test CPU: {psutil.cpu_percent()}%')"
	@echo "$(GREEN)‚úÖ Tests termin√©s$(NC)"

health: ## V√©rifie la sant√© du conteneur
	@echo "$(BLUE)üè• V√©rification de sant√©...$(NC)"
	docker inspect --format='{{.State.Health.Status}}' $(CONTAINER_NAME) || echo "Pas de healthcheck configur√©"

validate-config: ## Valide la configuration Docker Compose
	@echo "$(BLUE)‚úÖ Validation de la configuration...$(NC)"
	docker-compose -f $(COMPOSE_FILE) config

# Installation et configuration
install: build ## Installation compl√®te (build + up)
	@echo "$(BLUE)üì¶ Installation du serveur MCP...$(NC)"
	$(MAKE) up
	@echo "$(GREEN)üéâ Installation termin√©e!$(NC)"
	@echo ""
	@echo "$(YELLOW)Configuration Claude Desktop:$(NC)"
	@echo "Copiez le contenu de $(CONFIG_FILE) dans votre configuration mcp-toolkit-gateway"

install-deps: ## Installe les d√©pendances Python localement
	@echo "$(BLUE)üì¶ Installation des d√©pendances...$(NC)"
	pip install -r requirements.txt
	@echo "$(GREEN)‚úÖ D√©pendances install√©es$(NC)"

# Nettoyage
clean: ## Nettoie les ressources Docker
	@echo "$(BLUE)üßπ Nettoyage...$(NC)"
	docker-compose -f $(COMPOSE_FILE) down -v --remove-orphans
	docker image rm $(IMAGE_NAME) 2>/dev/null || true
	docker system prune -f
	@echo "$(GREEN)‚úÖ Nettoyage termin√©$(NC)"

clean-all: clean ## Nettoyage complet (images, volumes, r√©seaux)
	@echo "$(BLUE)üßπ Nettoyage complet...$(NC)"
	docker system prune -a -f
	@echo "$(GREEN)‚úÖ Nettoyage complet termin√©$(NC)"

# Utilitaires
shell: ## Ouvre un shell dans le conteneur
	docker-compose -f $(COMPOSE_FILE) exec $(CONTAINER_NAME) /bin/bash

exec: ## Ex√©cute une commande dans le conteneur (usage: make exec CMD="commande")
	docker-compose -f $(COMPOSE_FILE) exec $(CONTAINER_NAME) $(CMD)

backup: ## Cr√©e une sauvegarde des donn√©es
	@echo "$(BLUE)üíæ Cr√©ation de la sauvegarde...$(NC)"
	mkdir -p backups
	tar -czf backups/mcp-backup-$(shell date +%Y%m%d-%H%M%S).tar.gz data logs
	@echo "$(GREEN)‚úÖ Sauvegarde cr√©√©e$(NC)"

# Documentation
docs: ## G√©n√®re la documentation
	@echo "$(BLUE)üìö G√©n√©ration de la documentation...$(NC)"
	@echo "Configuration exemple pour Claude Desktop:"
	@cat $(CONFIG_FILE)

# Commandes de d√©veloppement avanc√©es
lint: ## V√©rifie le code Python
	@echo "$(BLUE)üîç V√©rification du code...$(NC)"
	python -m flake8 server.py || echo "Installer flake8: pip install flake8"

format: ## Formate le code Python
	@echo "$(BLUE)üé® Formatage du code...$(NC)"
	python -m black server.py || echo "Installer black: pip install black"

security-scan: ## Scan de s√©curit√© des d√©pendances
	@echo "$(BLUE)üîí Scan de s√©curit√©...$(NC)"
	python -m safety check || echo "Installer safety: pip install safety"

# Informations
version: ## Affiche les versions des composants
	@echo "$(BLUE)üìã Versions des composants:$(NC)"
	@echo "Docker: $(shell docker --version)"
	@echo "Docker Compose: $(shell docker-compose --version)"
	@echo "Python: $(shell python --version 2>&1)"

info: ## Affiche les informations du projet
	@echo "$(BLUE)‚ÑπÔ∏è  Informations du projet:$(NC)"
	@echo "Nom: $(IMAGE_NAME)"
	@echo "Conteneur: $(CONTAINER_NAME)"
	@echo "Configuration: $(CONFIG_FILE)"
	@echo "Compose: $(COMPOSE_FILE)"